{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import ecommerce datasets\n",
    "\n",
    "import pandas as pd\n",
    "df1 = pd.read_csv(\"/Users/tomilayoibrahim/Desktop/ecommerce_shop/2019_Dec.csv\")\n",
    "df2 = pd.read_csv(\"/Users/tomilayoibrahim/Desktop/ecommerce_shop/2019_Nov.csv\")\n",
    "df3 = pd.read_csv(\"/Users/tomilayoibrahim/Desktop/ecommerce_shop/2019_Oct.csv\")\n",
    "df4 = pd.read_csv(\"/Users/tomilayoibrahim/Desktop/ecommerce_shop/2020_Feb.csv\")\n",
    "df5 = pd.read_csv(\"/Users/tomilayoibrahim/Desktop/ecommerce_shop/2020_Jan.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Merge ecommerce store 5-mnth period data\n",
    "ecommdf = pd.concat([df1,df2,df3,df4,df5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20692840, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check how much data ecommdf contains\n",
    "len(ecommdf)\n",
    "ecommdf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>category_code</th>\n",
       "      <th>brand</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_session</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5712790</td>\n",
       "      <td>1487580005268456287</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f.o.x</td>\n",
       "      <td>6.27</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5764655</td>\n",
       "      <td>1487580005411062629</td>\n",
       "      <td>NaN</td>\n",
       "      <td>cnd</td>\n",
       "      <td>29.05</td>\n",
       "      <td>412120092</td>\n",
       "      <td>8adff31e-2051-4894-9758-224bfa8aec18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-12-01 00:00:02 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>4958</td>\n",
       "      <td>1487580009471148064</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>1.19</td>\n",
       "      <td>494077766</td>\n",
       "      <td>c99a50e8-2fac-4c4d-89ec-41c05f114554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-12-01 00:00:05 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5848413</td>\n",
       "      <td>1487580007675986893</td>\n",
       "      <td>NaN</td>\n",
       "      <td>freedecor</td>\n",
       "      <td>0.79</td>\n",
       "      <td>348405118</td>\n",
       "      <td>722ffea5-73c0-4924-8e8f-371ff8031af4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-12-01 00:00:07 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5824148</td>\n",
       "      <td>1487580005511725929</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.56</td>\n",
       "      <td>576005683</td>\n",
       "      <td>28172809-7e4a-45ce-bab0-5efa90117cd5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                event_time        event_type  product_id          category_id  \\\n",
       "0  2019-12-01 00:00:00 UTC  remove_from_cart     5712790  1487580005268456287   \n",
       "1  2019-12-01 00:00:00 UTC              view     5764655  1487580005411062629   \n",
       "2  2019-12-01 00:00:02 UTC              cart        4958  1487580009471148064   \n",
       "3  2019-12-01 00:00:05 UTC              view     5848413  1487580007675986893   \n",
       "4  2019-12-01 00:00:07 UTC              view     5824148  1487580005511725929   \n",
       "\n",
       "  category_code      brand  price    user_id  \\\n",
       "0           NaN      f.o.x   6.27  576802932   \n",
       "1           NaN        cnd  29.05  412120092   \n",
       "2           NaN     runail   1.19  494077766   \n",
       "3           NaN  freedecor   0.79  348405118   \n",
       "4           NaN        NaN   5.56  576005683   \n",
       "\n",
       "                           user_session  \n",
       "0  51d85cb0-897f-48d2-918b-ad63965c12dc  \n",
       "1  8adff31e-2051-4894-9758-224bfa8aec18  \n",
       "2  c99a50e8-2fac-4c4d-89ec-41c05f114554  \n",
       "3  722ffea5-73c0-4924-8e8f-371ff8031af4  \n",
       "4  28172809-7e4a-45ce-bab0-5efa90117cd5  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommdf.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 20692840 entries, 0 to 4264751\n",
      "Data columns (total 9 columns):\n",
      " #   Column         Dtype  \n",
      "---  ------         -----  \n",
      " 0   event_time     object \n",
      " 1   event_type     object \n",
      " 2   product_id     int64  \n",
      " 3   category_id    int64  \n",
      " 4   category_code  object \n",
      " 5   brand          object \n",
      " 6   price          float64\n",
      " 7   user_id        int64  \n",
      " 8   user_session   object \n",
      "dtypes: float64(1), int64(3), object(5)\n",
      "memory usage: 1.5+ GB\n"
     ]
    }
   ],
   "source": [
    "#Display attributes and datatypes\n",
    "ecommdf.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.069284e+07</td>\n",
       "      <td>2.069284e+07</td>\n",
       "      <td>2.069284e+07</td>\n",
       "      <td>2.069284e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.484297e+06</td>\n",
       "      <td>1.554230e+18</td>\n",
       "      <td>8.534735e+00</td>\n",
       "      <td>5.215527e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.305716e+06</td>\n",
       "      <td>1.691038e+17</td>\n",
       "      <td>1.938142e+01</td>\n",
       "      <td>8.744312e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.752000e+03</td>\n",
       "      <td>1.487580e+18</td>\n",
       "      <td>-7.937000e+01</td>\n",
       "      <td>4.654960e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.724650e+06</td>\n",
       "      <td>1.487580e+18</td>\n",
       "      <td>2.060000e+00</td>\n",
       "      <td>4.818306e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.810720e+06</td>\n",
       "      <td>1.487580e+18</td>\n",
       "      <td>4.050000e+00</td>\n",
       "      <td>5.531297e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.857864e+06</td>\n",
       "      <td>1.487580e+18</td>\n",
       "      <td>7.060000e+00</td>\n",
       "      <td>5.788573e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.932595e+06</td>\n",
       "      <td>2.242903e+18</td>\n",
       "      <td>3.277800e+02</td>\n",
       "      <td>6.220902e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         product_id   category_id         price       user_id\n",
       "count  2.069284e+07  2.069284e+07  2.069284e+07  2.069284e+07\n",
       "mean   5.484297e+06  1.554230e+18  8.534735e+00  5.215527e+08\n",
       "std    1.305716e+06  1.691038e+17  1.938142e+01  8.744312e+07\n",
       "min    3.752000e+03  1.487580e+18 -7.937000e+01  4.654960e+05\n",
       "25%    5.724650e+06  1.487580e+18  2.060000e+00  4.818306e+08\n",
       "50%    5.810720e+06  1.487580e+18  4.050000e+00  5.531297e+08\n",
       "75%    5.857864e+06  1.487580e+18  7.060000e+00  5.788573e+08\n",
       "max    5.932595e+06  2.242903e+18  3.277800e+02  6.220902e+08"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Describe ecommdf\n",
    "ecommdf.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>category_code</th>\n",
       "      <th>brand</th>\n",
       "      <th>user_session</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20692840</td>\n",
       "      <td>20692840</td>\n",
       "      <td>353594</td>\n",
       "      <td>11935723</td>\n",
       "      <td>20688242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>8782890</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>273</td>\n",
       "      <td>4535941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>2020-02-15 16:08:37 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>appliances.environment.vacuum</td>\n",
       "      <td>runail</td>\n",
       "      <td>74206ba1-c863-4760-bbdc-b11777059e46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>3087</td>\n",
       "      <td>9657821</td>\n",
       "      <td>149168</td>\n",
       "      <td>1528908</td>\n",
       "      <td>5411</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     event_time event_type                  category_code  \\\n",
       "count                  20692840   20692840                         353594   \n",
       "unique                  8782890          4                             12   \n",
       "top     2020-02-15 16:08:37 UTC       view  appliances.environment.vacuum   \n",
       "freq                       3087    9657821                         149168   \n",
       "\n",
       "           brand                          user_session  \n",
       "count   11935723                              20688242  \n",
       "unique       273                               4535941  \n",
       "top       runail  74206ba1-c863-4760-bbdc-b11777059e46  \n",
       "freq     1528908                                  5411  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Describe ecommdf\n",
    "ecommdf.describe(include=np.object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "view                9657821\n",
       "cart                5768333\n",
       "remove_from_cart    3979679\n",
       "purchase            1287007\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommdf['event_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'value_count (10,000)')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "event_type = ['view', 'cart', 'remove_from_cart', 'purchase']\n",
    "value_counts= [0,100000, 200000, 30000]\n",
    "\n",
    "plt.plot(event_type, value_counts)\n",
    "plt.xlabel('event_type')\n",
    "plt.ylabel('value_count (10,000)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5809910    141650\n",
       "5809912     55606\n",
       "5700037     51111\n",
       "5802432     45008\n",
       "5854897     44799\n",
       "            ...  \n",
       "5679334         1\n",
       "5679343         1\n",
       "5679339         1\n",
       "5695581         1\n",
       "5616969         1\n",
       "Name: product_id, Length: 54571, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Popular Product \n",
    "ecommdf['product_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "runail       1528908\n",
       "irisk        1033852\n",
       "masura        861763\n",
       "grattol       852591\n",
       "bpw.style     434813\n",
       "ingarden      430958\n",
       "estel         360912\n",
       "kapous        324394\n",
       "jessnail      252996\n",
       "uno           250377\n",
       "Name: brand, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Best selling brands\n",
    "Best_selling_brands = ecommdf['brand'].value_counts()\n",
    "Best_selling_brands.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "view                9657821\n",
       "cart                5768333\n",
       "remove_from_cart    3979679\n",
       "purchase            1287007\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommdf['event_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>category_code</th>\n",
       "      <th>brand</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_session</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>557</th>\n",
       "      <td>2019-12-01 00:17:50 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4554</td>\n",
       "      <td>1487580010796548183</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>0.38</td>\n",
       "      <td>473613801</td>\n",
       "      <td>d1e90c6a-c030-4d06-aaaf-6d12ec502bb9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>2019-12-01 00:17:50 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4600</td>\n",
       "      <td>1487580010796548183</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>0.38</td>\n",
       "      <td>473613801</td>\n",
       "      <td>d1e90c6a-c030-4d06-aaaf-6d12ec502bb9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>559</th>\n",
       "      <td>2019-12-01 00:17:50 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4607</td>\n",
       "      <td>1487580010796548183</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>0.38</td>\n",
       "      <td>473613801</td>\n",
       "      <td>d1e90c6a-c030-4d06-aaaf-6d12ec502bb9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>560</th>\n",
       "      <td>2019-12-01 00:17:50 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4640</td>\n",
       "      <td>1487580011157258342</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>0.37</td>\n",
       "      <td>473613801</td>\n",
       "      <td>d1e90c6a-c030-4d06-aaaf-6d12ec502bb9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>561</th>\n",
       "      <td>2019-12-01 00:17:50 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4689</td>\n",
       "      <td>1487580010796548183</td>\n",
       "      <td>NaN</td>\n",
       "      <td>runail</td>\n",
       "      <td>0.38</td>\n",
       "      <td>473613801</td>\n",
       "      <td>d1e90c6a-c030-4d06-aaaf-6d12ec502bb9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4264714</th>\n",
       "      <td>2020-01-31 23:58:26 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>5730206</td>\n",
       "      <td>1487580005092295511</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.32</td>\n",
       "      <td>604470329</td>\n",
       "      <td>6f853f2d-e1aa-49d4-84d8-284566ea1a0e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4264715</th>\n",
       "      <td>2020-01-31 23:58:26 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>5861342</td>\n",
       "      <td>1487580010645553231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.90</td>\n",
       "      <td>604470329</td>\n",
       "      <td>6f853f2d-e1aa-49d4-84d8-284566ea1a0e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4264716</th>\n",
       "      <td>2020-01-31 23:58:26 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>5867185</td>\n",
       "      <td>1487580007910867929</td>\n",
       "      <td>NaN</td>\n",
       "      <td>staleks</td>\n",
       "      <td>11.43</td>\n",
       "      <td>604470329</td>\n",
       "      <td>6f853f2d-e1aa-49d4-84d8-284566ea1a0e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4264717</th>\n",
       "      <td>2020-01-31 23:58:26 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>5877766</td>\n",
       "      <td>1605161575889502297</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.76</td>\n",
       "      <td>604470329</td>\n",
       "      <td>6f853f2d-e1aa-49d4-84d8-284566ea1a0e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4264718</th>\n",
       "      <td>2020-01-31 23:58:26 UTC</td>\n",
       "      <td>purchase</td>\n",
       "      <td>5905704</td>\n",
       "      <td>1487580005092295511</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.63</td>\n",
       "      <td>604470329</td>\n",
       "      <td>6f853f2d-e1aa-49d4-84d8-284566ea1a0e</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1287007 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      event_time event_type  product_id          category_id  \\\n",
       "557      2019-12-01 00:17:50 UTC   purchase        4554  1487580010796548183   \n",
       "558      2019-12-01 00:17:50 UTC   purchase        4600  1487580010796548183   \n",
       "559      2019-12-01 00:17:50 UTC   purchase        4607  1487580010796548183   \n",
       "560      2019-12-01 00:17:50 UTC   purchase        4640  1487580011157258342   \n",
       "561      2019-12-01 00:17:50 UTC   purchase        4689  1487580010796548183   \n",
       "...                          ...        ...         ...                  ...   \n",
       "4264714  2020-01-31 23:58:26 UTC   purchase     5730206  1487580005092295511   \n",
       "4264715  2020-01-31 23:58:26 UTC   purchase     5861342  1487580010645553231   \n",
       "4264716  2020-01-31 23:58:26 UTC   purchase     5867185  1487580007910867929   \n",
       "4264717  2020-01-31 23:58:26 UTC   purchase     5877766  1605161575889502297   \n",
       "4264718  2020-01-31 23:58:26 UTC   purchase     5905704  1487580005092295511   \n",
       "\n",
       "        category_code    brand  price    user_id  \\\n",
       "557               NaN   runail   0.38  473613801   \n",
       "558               NaN   runail   0.38  473613801   \n",
       "559               NaN   runail   0.38  473613801   \n",
       "560               NaN   runail   0.37  473613801   \n",
       "561               NaN   runail   0.38  473613801   \n",
       "...               ...      ...    ...        ...   \n",
       "4264714           NaN      NaN  10.32  604470329   \n",
       "4264715           NaN      NaN   1.90  604470329   \n",
       "4264716           NaN  staleks  11.43  604470329   \n",
       "4264717           NaN      NaN   4.76  604470329   \n",
       "4264718           NaN      NaN  10.63  604470329   \n",
       "\n",
       "                                 user_session  \n",
       "557      d1e90c6a-c030-4d06-aaaf-6d12ec502bb9  \n",
       "558      d1e90c6a-c030-4d06-aaaf-6d12ec502bb9  \n",
       "559      d1e90c6a-c030-4d06-aaaf-6d12ec502bb9  \n",
       "560      d1e90c6a-c030-4d06-aaaf-6d12ec502bb9  \n",
       "561      d1e90c6a-c030-4d06-aaaf-6d12ec502bb9  \n",
       "...                                       ...  \n",
       "4264714  6f853f2d-e1aa-49d4-84d8-284566ea1a0e  \n",
       "4264715  6f853f2d-e1aa-49d4-84d8-284566ea1a0e  \n",
       "4264716  6f853f2d-e1aa-49d4-84d8-284566ea1a0e  \n",
       "4264717  6f853f2d-e1aa-49d4-84d8-284566ea1a0e  \n",
       "4264718  6f853f2d-e1aa-49d4-84d8-284566ea1a0e  \n",
       "\n",
       "[1287007 rows x 9 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Products Purchased by Brand Name\n",
    "\n",
    "Products_purchased = ecommdf.loc[ecommdf.event_type == 'purchase']\n",
    "Products_purchased\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>brand</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>runail</th>\n",
       "      <td>111408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>irisk</th>\n",
       "      <td>73806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>masura</th>\n",
       "      <td>49751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grattol</th>\n",
       "      <td>49542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bpw.style</th>\n",
       "      <td>37943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ingarden</th>\n",
       "      <td>27411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>estel</th>\n",
       "      <td>19438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uno</th>\n",
       "      <td>17586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freedecor</th>\n",
       "      <td>17467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>italwax</th>\n",
       "      <td>17105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kapous</th>\n",
       "      <td>16335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>domix</th>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>milv</th>\n",
       "      <td>12691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>haruyama</th>\n",
       "      <td>11582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pole</th>\n",
       "      <td>11578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bluesky</th>\n",
       "      <td>11509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>jessnail</th>\n",
       "      <td>9661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>concept</th>\n",
       "      <td>9530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>severina</th>\n",
       "      <td>9173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zinger</th>\n",
       "      <td>9022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nagaraku</th>\n",
       "      <td>7915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnd</th>\n",
       "      <td>7686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airnails</th>\n",
       "      <td>7504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>de.lux</th>\n",
       "      <td>7072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lovely</th>\n",
       "      <td>7010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cosmoprofi</th>\n",
       "      <td>6973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lianail</th>\n",
       "      <td>6642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yoko</th>\n",
       "      <td>6628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>staleks</th>\n",
       "      <td>5811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uskusi</th>\n",
       "      <td>5708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f.o.x</th>\n",
       "      <td>5292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oniq</th>\n",
       "      <td>4757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beautix</th>\n",
       "      <td>4721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>roubloff</th>\n",
       "      <td>4644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pnb</th>\n",
       "      <td>4633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metzger</th>\n",
       "      <td>4262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>art-visage</th>\n",
       "      <td>4253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>swarovski</th>\n",
       "      <td>4031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smart</th>\n",
       "      <td>3819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>farmstay</th>\n",
       "      <td>3356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>browxenna</th>\n",
       "      <td>3231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kinetics</th>\n",
       "      <td>3206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rosi</th>\n",
       "      <td>3183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>levrana</th>\n",
       "      <td>2611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>markell</th>\n",
       "      <td>2587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>solomeya</th>\n",
       "      <td>2408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>levissime</th>\n",
       "      <td>2234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dizao</th>\n",
       "      <td>2201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>benovy</th>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kaaral</th>\n",
       "      <td>2115</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               len\n",
       "brand             \n",
       "runail      111408\n",
       "irisk        73806\n",
       "masura       49751\n",
       "grattol      49542\n",
       "bpw.style    37943\n",
       "ingarden     27411\n",
       "estel        19438\n",
       "uno          17586\n",
       "freedecor    17467\n",
       "italwax      17105\n",
       "kapous       16335\n",
       "domix        12958\n",
       "milv         12691\n",
       "haruyama     11582\n",
       "pole         11578\n",
       "bluesky      11509\n",
       "jessnail      9661\n",
       "concept       9530\n",
       "severina      9173\n",
       "zinger        9022\n",
       "nagaraku      7915\n",
       "cnd           7686\n",
       "airnails      7504\n",
       "de.lux        7072\n",
       "lovely        7010\n",
       "cosmoprofi    6973\n",
       "lianail       6642\n",
       "yoko          6628\n",
       "staleks       5811\n",
       "uskusi        5708\n",
       "f.o.x         5292\n",
       "oniq          4757\n",
       "beautix       4721\n",
       "roubloff      4644\n",
       "pnb           4633\n",
       "metzger       4262\n",
       "art-visage    4253\n",
       "swarovski     4031\n",
       "smart         3819\n",
       "farmstay      3356\n",
       "browxenna     3231\n",
       "kinetics      3206\n",
       "rosi          3183\n",
       "levrana       2611\n",
       "markell       2587\n",
       "solomeya      2408\n",
       "levissime     2234\n",
       "dizao         2201\n",
       "benovy        2180\n",
       "kaaral        2115"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top 50 selling Brands\n",
    "Best_selling_brands = Products_purchased.groupby('brand').brand.agg([len]).sort_values(by= 'len', ascending = False)\n",
    "Best_selling_brands.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121a5a510>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Best_selling_brands.head(30).plot(kind = \"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>480463194</th>\n",
       "      <td>715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469299888</th>\n",
       "      <td>603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>556579890</th>\n",
       "      <td>506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381816972</th>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>601469771</th>\n",
       "      <td>461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>557790271</th>\n",
       "      <td>438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>473313149</th>\n",
       "      <td>417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>517825140</th>\n",
       "      <td>412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247216055</th>\n",
       "      <td>409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566439116</th>\n",
       "      <td>409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431950134</th>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>575709540</th>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>471197852</th>\n",
       "      <td>389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>548209402</th>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531900924</th>\n",
       "      <td>372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150318419</th>\n",
       "      <td>370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>483574352</th>\n",
       "      <td>346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>546827800</th>\n",
       "      <td>329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>620029655</th>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>539691934</th>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>539636703</th>\n",
       "      <td>317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493840329</th>\n",
       "      <td>316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351818112</th>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564296564</th>\n",
       "      <td>306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386491215</th>\n",
       "      <td>301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378471818</th>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>538580192</th>\n",
       "      <td>288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565156776</th>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391667725</th>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>455746244</th>\n",
       "      <td>280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568038555</th>\n",
       "      <td>277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>578915216</th>\n",
       "      <td>273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>572081598</th>\n",
       "      <td>273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>573823111</th>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582804703</th>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172974485</th>\n",
       "      <td>262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514908450</th>\n",
       "      <td>262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525207529</th>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>507727824</th>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549507462</th>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565036131</th>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596971707</th>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>520672512</th>\n",
       "      <td>254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536575089</th>\n",
       "      <td>253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>603178692</th>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502220691</th>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>544606172</th>\n",
       "      <td>251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493285103</th>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532248612</th>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>516204225</th>\n",
       "      <td>245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           len\n",
       "user_id       \n",
       "480463194  715\n",
       "469299888  603\n",
       "556579890  506\n",
       "381816972  500\n",
       "601469771  461\n",
       "557790271  438\n",
       "473313149  417\n",
       "517825140  412\n",
       "247216055  409\n",
       "566439116  409\n",
       "431950134  400\n",
       "575709540  399\n",
       "471197852  389\n",
       "548209402  375\n",
       "531900924  372\n",
       "150318419  370\n",
       "483574352  346\n",
       "546827800  329\n",
       "620029655  324\n",
       "539691934  319\n",
       "539636703  317\n",
       "493840329  316\n",
       "351818112  312\n",
       "564296564  306\n",
       "386491215  301\n",
       "378471818  293\n",
       "538580192  288\n",
       "565156776  285\n",
       "391667725  283\n",
       "455746244  280\n",
       "568038555  277\n",
       "578915216  273\n",
       "572081598  273\n",
       "573823111  268\n",
       "582804703  264\n",
       "172974485  262\n",
       "514908450  262\n",
       "525207529  259\n",
       "507727824  257\n",
       "549507462  256\n",
       "565036131  255\n",
       "596971707  255\n",
       "520672512  254\n",
       "536575089  253\n",
       "603178692  252\n",
       "502220691  252\n",
       "544606172  251\n",
       "493285103  249\n",
       "532248612  249\n",
       "516204225  245"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top 50 Users (Customers). store can target this group with special discounts for cotinuing loyalty\n",
    "Top_customers = Products_purchased.groupby('user_id').user_id.agg([len]).sort_values(by= 'len', ascending = False)\n",
    "Top_customers.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121da9890>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Top_customers.head(30).plot(kind = \"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_time</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-02-09 20:10:58 UTC</th>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-26 05:38:37 UTC</th>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-20 14:59:05 UTC</th>\n",
       "      <td>282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-18 01:17:08 UTC</th>\n",
       "      <td>279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 14:12:08 UTC</th>\n",
       "      <td>260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-09 09:06:06 UTC</th>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-07 12:31:32 UTC</th>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 20:42:26 UTC</th>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-13 14:28:17 UTC</th>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-14 20:24:38 UTC</th>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-12 18:31:17 UTC</th>\n",
       "      <td>219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-05 21:52:16 UTC</th>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-21 13:27:39 UTC</th>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-15 13:58:40 UTC</th>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-18 22:13:23 UTC</th>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-15 12:00:35 UTC</th>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04 17:12:57 UTC</th>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-04 06:36:53 UTC</th>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-22 11:21:29 UTC</th>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-19 12:10:19 UTC</th>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         len\n",
       "event_time                  \n",
       "2020-02-09 20:10:58 UTC  429\n",
       "2020-02-26 05:38:37 UTC  324\n",
       "2020-02-20 14:59:05 UTC  282\n",
       "2019-11-18 01:17:08 UTC  279\n",
       "2019-12-02 14:12:08 UTC  260\n",
       "2020-01-09 09:06:06 UTC  257\n",
       "2019-11-07 12:31:32 UTC  252\n",
       "2019-12-02 20:42:26 UTC  246\n",
       "2020-02-13 14:28:17 UTC  240\n",
       "2020-01-14 20:24:38 UTC  234\n",
       "2020-02-12 18:31:17 UTC  219\n",
       "2020-02-05 21:52:16 UTC  218\n",
       "2019-10-21 13:27:39 UTC  208\n",
       "2019-12-15 13:58:40 UTC  199\n",
       "2020-02-18 22:13:23 UTC  194\n",
       "2019-10-15 12:00:35 UTC  192\n",
       "2019-12-04 17:12:57 UTC  188\n",
       "2020-02-04 06:36:53 UTC  186\n",
       "2020-01-22 11:21:29 UTC  181\n",
       "2020-01-19 12:10:19 UTC  180"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Best time users make purchases( to target them with recommendations and adverts)\n",
    "Best_sales_time = Products_purchased.groupby('event_time').event_time.agg([len]).sort_values(by= 'len', ascending = False)\n",
    "Best_sales_time.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e2b79d0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Best_sales_time.head(20).plot(kind = \"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_time</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-02-09 20:10:58 UTC</th>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-26 05:38:37 UTC</th>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-20 14:59:05 UTC</th>\n",
       "      <td>282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-18 01:17:08 UTC</th>\n",
       "      <td>279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 14:12:08 UTC</th>\n",
       "      <td>260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-09 09:06:06 UTC</th>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-07 12:31:32 UTC</th>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 20:42:26 UTC</th>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-13 14:28:17 UTC</th>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-14 20:24:38 UTC</th>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-12 18:31:17 UTC</th>\n",
       "      <td>219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-05 21:52:16 UTC</th>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-21 13:27:39 UTC</th>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-15 13:58:40 UTC</th>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-18 22:13:23 UTC</th>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-15 12:00:35 UTC</th>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04 17:12:57 UTC</th>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-04 06:36:53 UTC</th>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-22 11:21:29 UTC</th>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-19 12:10:19 UTC</th>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         len\n",
       "event_time                  \n",
       "2020-02-09 20:10:58 UTC  429\n",
       "2020-02-26 05:38:37 UTC  324\n",
       "2020-02-20 14:59:05 UTC  282\n",
       "2019-11-18 01:17:08 UTC  279\n",
       "2019-12-02 14:12:08 UTC  260\n",
       "2020-01-09 09:06:06 UTC  257\n",
       "2019-11-07 12:31:32 UTC  252\n",
       "2019-12-02 20:42:26 UTC  246\n",
       "2020-02-13 14:28:17 UTC  240\n",
       "2020-01-14 20:24:38 UTC  234\n",
       "2020-02-12 18:31:17 UTC  219\n",
       "2020-02-05 21:52:16 UTC  218\n",
       "2019-10-21 13:27:39 UTC  208\n",
       "2019-12-15 13:58:40 UTC  199\n",
       "2020-02-18 22:13:23 UTC  194\n",
       "2019-10-15 12:00:35 UTC  192\n",
       "2019-12-04 17:12:57 UTC  188\n",
       "2020-02-04 06:36:53 UTC  186\n",
       "2020-01-22 11:21:29 UTC  181\n",
       "2020-01-19 12:10:19 UTC  180"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Best time users make purchases( to target them with recommendations and adverts)\n",
    "Best_sales_time = Products_purchased.groupby('event_time').event_time.agg([len]).sort_values(by= 'len', ascending = False)\n",
    "Best_sales_time.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x127b14cd0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Best_sales_time.head(30).plot(kind = \"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exclude all rows where price have value less that 1.It is assumed that negative prices are as a result of human errors thus excluded from the df.\n",
    "ecommdf2= ecommdf[ecommdf.price >= 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_session</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5712790</td>\n",
       "      <td>1487580005268456287</td>\n",
       "      <td>f.o.x</td>\n",
       "      <td>6.27</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5764655</td>\n",
       "      <td>1487580005411062629</td>\n",
       "      <td>cnd</td>\n",
       "      <td>29.05</td>\n",
       "      <td>412120092</td>\n",
       "      <td>8adff31e-2051-4894-9758-224bfa8aec18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-12-01 00:00:02 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>4958</td>\n",
       "      <td>1487580009471148064</td>\n",
       "      <td>runail</td>\n",
       "      <td>1.19</td>\n",
       "      <td>494077766</td>\n",
       "      <td>c99a50e8-2fac-4c4d-89ec-41c05f114554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-12-01 00:00:07 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5824148</td>\n",
       "      <td>1487580005511725929</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.56</td>\n",
       "      <td>576005683</td>\n",
       "      <td>28172809-7e4a-45ce-bab0-5efa90117cd5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019-12-01 00:00:09 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5773361</td>\n",
       "      <td>1487580005134238553</td>\n",
       "      <td>runail</td>\n",
       "      <td>2.62</td>\n",
       "      <td>560109803</td>\n",
       "      <td>38cf4ba1-4a0a-4c9e-b870-46685d105f95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                event_time        event_type  product_id          category_id  \\\n",
       "0  2019-12-01 00:00:00 UTC  remove_from_cart     5712790  1487580005268456287   \n",
       "1  2019-12-01 00:00:00 UTC              view     5764655  1487580005411062629   \n",
       "2  2019-12-01 00:00:02 UTC              cart        4958  1487580009471148064   \n",
       "4  2019-12-01 00:00:07 UTC              view     5824148  1487580005511725929   \n",
       "5  2019-12-01 00:00:09 UTC              view     5773361  1487580005134238553   \n",
       "\n",
       "    brand  price    user_id                          user_session  \n",
       "0   f.o.x   6.27  576802932  51d85cb0-897f-48d2-918b-ad63965c12dc  \n",
       "1     cnd  29.05  412120092  8adff31e-2051-4894-9758-224bfa8aec18  \n",
       "2  runail   1.19  494077766  c99a50e8-2fac-4c4d-89ec-41c05f114554  \n",
       "4     NaN   5.56  576005683  28172809-7e4a-45ce-bab0-5efa90117cd5  \n",
       "5  runail   2.62  560109803  38cf4ba1-4a0a-4c9e-b870-46685d105f95  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Drop category_code because it has over 90% NAs\n",
    "ecommdf3= ecommdf2.drop(['category_code'], axis=1)\n",
    "ecommdf3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import matplotlab\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.021866</td>\n",
       "      <td>-0.030665</td>\n",
       "      <td>-0.014106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category_id</th>\n",
       "      <td>0.021866</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.003304</td>\n",
       "      <td>0.013431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>-0.030665</td>\n",
       "      <td>-0.003304</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.036393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <td>-0.014106</td>\n",
       "      <td>0.013431</td>\n",
       "      <td>0.036393</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             product_id  category_id     price   user_id\n",
       "product_id     1.000000     0.021866 -0.030665 -0.014106\n",
       "category_id    0.021866     1.000000 -0.003304  0.013431\n",
       "price         -0.030665    -0.003304  1.000000  0.036393\n",
       "user_id       -0.014106     0.013431  0.036393  1.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommdf3.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_session</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5712790</td>\n",
       "      <td>1487580005268456287</td>\n",
       "      <td>f.o.x</td>\n",
       "      <td>6.27</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-01 00:00:00 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5764655</td>\n",
       "      <td>1487580005411062629</td>\n",
       "      <td>cnd</td>\n",
       "      <td>29.05</td>\n",
       "      <td>412120092</td>\n",
       "      <td>8adff31e-2051-4894-9758-224bfa8aec18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-12-01 00:00:02 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>4958</td>\n",
       "      <td>1487580009471148064</td>\n",
       "      <td>runail</td>\n",
       "      <td>1.19</td>\n",
       "      <td>494077766</td>\n",
       "      <td>c99a50e8-2fac-4c4d-89ec-41c05f114554</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-12-01 00:00:07 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5824148</td>\n",
       "      <td>1487580005511725929</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.56</td>\n",
       "      <td>576005683</td>\n",
       "      <td>28172809-7e4a-45ce-bab0-5efa90117cd5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019-12-01 00:00:09 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5773361</td>\n",
       "      <td>1487580005134238553</td>\n",
       "      <td>runail</td>\n",
       "      <td>2.62</td>\n",
       "      <td>560109803</td>\n",
       "      <td>38cf4ba1-4a0a-4c9e-b870-46685d105f95</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2019-12-01 00:00:18 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5629988</td>\n",
       "      <td>1487580009311764506</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.19</td>\n",
       "      <td>579966747</td>\n",
       "      <td>1512be50-d0fd-4a92-bcd8-3ea3943f2a3b</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2019-12-01 00:00:22 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5807805</td>\n",
       "      <td>1487580005713052531</td>\n",
       "      <td>ingarden</td>\n",
       "      <td>4.44</td>\n",
       "      <td>576005683</td>\n",
       "      <td>28172809-7e4a-45ce-bab0-5efa90117cd5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2019-12-01 00:00:27 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5588608</td>\n",
       "      <td>1487580008145748965</td>\n",
       "      <td>roubloff</td>\n",
       "      <td>5.40</td>\n",
       "      <td>546170008</td>\n",
       "      <td>676d9fcc-2a4f-4448-b49d-136f2e4208c1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2019-12-01 00:00:40 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5755170</td>\n",
       "      <td>1487580009387261981</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.79</td>\n",
       "      <td>579751441</td>\n",
       "      <td>8de492d7-0937-47ae-be2c-a7615aec2b0d</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2019-12-01 00:00:44 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5650294</td>\n",
       "      <td>1487580007835370453</td>\n",
       "      <td>metzger</td>\n",
       "      <td>3.33</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2019-12-01 00:00:45 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5755170</td>\n",
       "      <td>1487580009387261981</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.79</td>\n",
       "      <td>579751441</td>\n",
       "      <td>8de492d7-0937-47ae-be2c-a7615aec2b0d</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2019-12-01 00:00:46 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5692261</td>\n",
       "      <td>1487580007835370453</td>\n",
       "      <td>staleks</td>\n",
       "      <td>6.35</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2019-12-01 00:00:46 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5798929</td>\n",
       "      <td>1783999068909863670</td>\n",
       "      <td>zinger</td>\n",
       "      <td>6.19</td>\n",
       "      <td>579966747</td>\n",
       "      <td>1512be50-d0fd-4a92-bcd8-3ea3943f2a3b</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2019-12-01 00:00:46 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5755170</td>\n",
       "      <td>1487580009387261981</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.79</td>\n",
       "      <td>579751441</td>\n",
       "      <td>8de492d7-0937-47ae-be2c-a7615aec2b0d</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2019-12-01 00:00:49 UTC</td>\n",
       "      <td>remove_from_cart</td>\n",
       "      <td>5694628</td>\n",
       "      <td>1487580007835370453</td>\n",
       "      <td>yoko</td>\n",
       "      <td>3.65</td>\n",
       "      <td>576802932</td>\n",
       "      <td>51d85cb0-897f-48d2-918b-ad63965c12dc</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2019-12-01 00:00:50 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>3936</td>\n",
       "      <td>1487580005343953762</td>\n",
       "      <td>entity</td>\n",
       "      <td>10.95</td>\n",
       "      <td>579969717</td>\n",
       "      <td>006dd2fb-ae1e-4461-985a-d4e70ca64543</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2019-12-01 00:00:52 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5761411</td>\n",
       "      <td>1487580007432717250</td>\n",
       "      <td>ingarden</td>\n",
       "      <td>2.86</td>\n",
       "      <td>494077766</td>\n",
       "      <td>c99a50e8-2fac-4c4d-89ec-41c05f114554</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2019-12-01 00:00:58 UTC</td>\n",
       "      <td>cart</td>\n",
       "      <td>5761411</td>\n",
       "      <td>1487580007432717250</td>\n",
       "      <td>ingarden</td>\n",
       "      <td>2.86</td>\n",
       "      <td>494077766</td>\n",
       "      <td>c99a50e8-2fac-4c4d-89ec-41c05f114554</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019-12-01 00:01:02 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5706778</td>\n",
       "      <td>1487580005268456287</td>\n",
       "      <td>beautix</td>\n",
       "      <td>14.13</td>\n",
       "      <td>564257889</td>\n",
       "      <td>a4248817-8d0d-4dac-96e6-a586563308de</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2019-12-01 00:01:11 UTC</td>\n",
       "      <td>view</td>\n",
       "      <td>5849033</td>\n",
       "      <td>1487580005092295511</td>\n",
       "      <td>uno</td>\n",
       "      <td>10.32</td>\n",
       "      <td>562651624</td>\n",
       "      <td>f8783526-2382-454b-b417-fa48d371030f</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 event_time        event_type  product_id  \\\n",
       "0   2019-12-01 00:00:00 UTC  remove_from_cart     5712790   \n",
       "1   2019-12-01 00:00:00 UTC              view     5764655   \n",
       "2   2019-12-01 00:00:02 UTC              cart        4958   \n",
       "4   2019-12-01 00:00:07 UTC              view     5824148   \n",
       "5   2019-12-01 00:00:09 UTC              view     5773361   \n",
       "6   2019-12-01 00:00:18 UTC              cart     5629988   \n",
       "7   2019-12-01 00:00:22 UTC              view     5807805   \n",
       "8   2019-12-01 00:00:27 UTC              view     5588608   \n",
       "10  2019-12-01 00:00:40 UTC              cart     5755170   \n",
       "11  2019-12-01 00:00:44 UTC  remove_from_cart     5650294   \n",
       "12  2019-12-01 00:00:45 UTC              cart     5755170   \n",
       "13  2019-12-01 00:00:46 UTC  remove_from_cart     5692261   \n",
       "14  2019-12-01 00:00:46 UTC              view     5798929   \n",
       "15  2019-12-01 00:00:46 UTC              cart     5755170   \n",
       "16  2019-12-01 00:00:49 UTC  remove_from_cart     5694628   \n",
       "17  2019-12-01 00:00:50 UTC              view        3936   \n",
       "18  2019-12-01 00:00:52 UTC              cart     5761411   \n",
       "19  2019-12-01 00:00:58 UTC              cart     5761411   \n",
       "22  2019-12-01 00:01:02 UTC              view     5706778   \n",
       "23  2019-12-01 00:01:11 UTC              view     5849033   \n",
       "\n",
       "            category_id     brand  price    user_id  \\\n",
       "0   1487580005268456287     f.o.x   6.27  576802932   \n",
       "1   1487580005411062629       cnd  29.05  412120092   \n",
       "2   1487580009471148064    runail   1.19  494077766   \n",
       "4   1487580005511725929       NaN   5.56  576005683   \n",
       "5   1487580005134238553    runail   2.62  560109803   \n",
       "6   1487580009311764506       NaN   1.19  579966747   \n",
       "7   1487580005713052531  ingarden   4.44  576005683   \n",
       "8   1487580008145748965  roubloff   5.40  546170008   \n",
       "10  1487580009387261981       NaN   2.79  579751441   \n",
       "11  1487580007835370453   metzger   3.33  576802932   \n",
       "12  1487580009387261981       NaN   2.79  579751441   \n",
       "13  1487580007835370453   staleks   6.35  576802932   \n",
       "14  1783999068909863670    zinger   6.19  579966747   \n",
       "15  1487580009387261981       NaN   2.79  579751441   \n",
       "16  1487580007835370453      yoko   3.65  576802932   \n",
       "17  1487580005343953762    entity  10.95  579969717   \n",
       "18  1487580007432717250  ingarden   2.86  494077766   \n",
       "19  1487580007432717250  ingarden   2.86  494077766   \n",
       "22  1487580005268456287   beautix  14.13  564257889   \n",
       "23  1487580005092295511       uno  10.32  562651624   \n",
       "\n",
       "                            user_session  rating  \n",
       "0   51d85cb0-897f-48d2-918b-ad63965c12dc       1  \n",
       "1   8adff31e-2051-4894-9758-224bfa8aec18       2  \n",
       "2   c99a50e8-2fac-4c4d-89ec-41c05f114554       3  \n",
       "4   28172809-7e4a-45ce-bab0-5efa90117cd5       2  \n",
       "5   38cf4ba1-4a0a-4c9e-b870-46685d105f95       2  \n",
       "6   1512be50-d0fd-4a92-bcd8-3ea3943f2a3b       3  \n",
       "7   28172809-7e4a-45ce-bab0-5efa90117cd5       2  \n",
       "8   676d9fcc-2a4f-4448-b49d-136f2e4208c1       2  \n",
       "10  8de492d7-0937-47ae-be2c-a7615aec2b0d       3  \n",
       "11  51d85cb0-897f-48d2-918b-ad63965c12dc       1  \n",
       "12  8de492d7-0937-47ae-be2c-a7615aec2b0d       3  \n",
       "13  51d85cb0-897f-48d2-918b-ad63965c12dc       1  \n",
       "14  1512be50-d0fd-4a92-bcd8-3ea3943f2a3b       2  \n",
       "15  8de492d7-0937-47ae-be2c-a7615aec2b0d       3  \n",
       "16  51d85cb0-897f-48d2-918b-ad63965c12dc       1  \n",
       "17  006dd2fb-ae1e-4461-985a-d4e70ca64543       2  \n",
       "18  c99a50e8-2fac-4c4d-89ec-41c05f114554       3  \n",
       "19  c99a50e8-2fac-4c4d-89ec-41c05f114554       3  \n",
       "22  a4248817-8d0d-4dac-96e6-a586563308de       2  \n",
       "23  f8783526-2382-454b-b417-fa48d371030f       2  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#In order to build the recommendation model, even_type will be ranked in order of interest as ratings and stored in a new column. 'remove_from_cart':1, 'view':2, 'cart': 3, 'purchase': 3})\n",
    "\n",
    "ecommdf3['rating']= ecommdf3['event_type'].map({'remove_from_cart':1, 'view':2, 'cart': 3, 'purchase': 3})\n",
    "ecommdf3.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecommrdf = ecommdf3.drop([ 'price', 'event_time','event_type','category_id', 'user_session'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>user_id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5712790</td>\n",
       "      <td>f.o.x</td>\n",
       "      <td>576802932</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5764655</td>\n",
       "      <td>cnd</td>\n",
       "      <td>412120092</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4958</td>\n",
       "      <td>runail</td>\n",
       "      <td>494077766</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5824148</td>\n",
       "      <td>NaN</td>\n",
       "      <td>576005683</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5773361</td>\n",
       "      <td>runail</td>\n",
       "      <td>560109803</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   product_id   brand    user_id  rating\n",
       "0     5712790   f.o.x  576802932       1\n",
       "1     5764655     cnd  412120092       2\n",
       "2        4958  runail  494077766       3\n",
       "4     5824148     NaN  576005683       2\n",
       "5     5773361  runail  560109803       2"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommrdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To drop duplicated records\n",
    "ecommrdf = ecommrdf.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(ecommrdf.corr())\n",
    "plt.xticks(range(len(ecommrdf.columns )), ecommrdf.columns)\n",
    "plt.yticks(range(len(ecommrdf.columns)), ecommrdf.columns)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12577051"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#length of ecommrdf \n",
    "len(ecommrdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1578988"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of unique users(customers)\n",
    "users = ecommrdf['user_id'].unique()\n",
    "len(users)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50808"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of unique products\n",
    "products = ecommrdf['product_id'].unique()\n",
    "len(products)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.1451522300418437"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mean of Ratings\n",
    "ratings = ecommrdf['rating'].mean()\n",
    "ratings\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x11c0a90d0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(ecommrdf['rating'], ecommrdf['user_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12cd9b1d0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(ecommrdf['product_id'], ecommrdf['rating'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Before starting with the correlation calculation, we need to have all ratings of a film in columns, the rows will represent the users and the data in the table will be the ratings. For this we can use the function pivot_table of pandas as below:\n",
    "\n",
    "ecommrdf = ecommrdf.pivot_table(index = 'user_id', columns = 'brand', values = 'rating')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>brand</th>\n",
       "      <th>airnails</th>\n",
       "      <th>almea</th>\n",
       "      <th>andrea</th>\n",
       "      <th>ardell</th>\n",
       "      <th>arganoil</th>\n",
       "      <th>art-visage</th>\n",
       "      <th>artex</th>\n",
       "      <th>aura</th>\n",
       "      <th>australis</th>\n",
       "      <th>avene</th>\n",
       "      <th>...</th>\n",
       "      <th>voesh</th>\n",
       "      <th>vosev</th>\n",
       "      <th>weaver</th>\n",
       "      <th>yllozure</th>\n",
       "      <th>yoko</th>\n",
       "      <th>ypsed</th>\n",
       "      <th>yu-r</th>\n",
       "      <th>zab</th>\n",
       "      <th>zeitun</th>\n",
       "      <th>zinger</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>465496</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1120748</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1180452</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458813</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2038666</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2963072</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3571443</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4103071</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4230352</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4661182</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5151616</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5493470</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6217356</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6406435</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8072106</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8194617</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8846226</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9478445</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9794320</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10079204</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 273 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "brand     airnails  almea  andrea  ardell  arganoil  art-visage  artex  aura  \\\n",
       "user_id                                                                        \n",
       "465496         NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "1120748        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "1180452        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "1458813        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "2038666        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "2963072        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "3571443        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "4103071        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "4230352        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "4661182        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "5151616        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "5493470        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "6217356        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "6406435        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "8072106        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "8194617        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "8846226        NaN    NaN     NaN     NaN       NaN         2.0    NaN   NaN   \n",
       "9478445        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "9794320        NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "10079204       NaN    NaN     NaN     NaN       NaN         NaN    NaN   NaN   \n",
       "\n",
       "brand     australis  avene  ...  voesh  vosev  weaver  yllozure  yoko  ypsed  \\\n",
       "user_id                     ...                                                \n",
       "465496          NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "1120748         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "1180452         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "1458813         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "2038666         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "2963072         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "3571443         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "4103071         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "4230352         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "4661182         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "5151616         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "5493470         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "6217356         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "6406435         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "8072106         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "8194617         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "8846226         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "9478445         NaN    NaN  ...    NaN    NaN     NaN       NaN   2.0    NaN   \n",
       "9794320         NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "10079204        NaN    NaN  ...    NaN    NaN     NaN       NaN   NaN    NaN   \n",
       "\n",
       "brand     yu-r  zab  zeitun  zinger  \n",
       "user_id                              \n",
       "465496     NaN  NaN     NaN     NaN  \n",
       "1120748    NaN  NaN     NaN     NaN  \n",
       "1180452    NaN  NaN     NaN     NaN  \n",
       "1458813    NaN  NaN     NaN     NaN  \n",
       "2038666    NaN  NaN     NaN     NaN  \n",
       "2963072    NaN  NaN     NaN     NaN  \n",
       "3571443    NaN  NaN     NaN     2.0  \n",
       "4103071    NaN  NaN     NaN     NaN  \n",
       "4230352    NaN  NaN     NaN     NaN  \n",
       "4661182    NaN  NaN     NaN     NaN  \n",
       "5151616    NaN  NaN     NaN     NaN  \n",
       "5493470    NaN  NaN     NaN     NaN  \n",
       "6217356    NaN  NaN     NaN     NaN  \n",
       "6406435    NaN  NaN     NaN     NaN  \n",
       "8072106    NaN  NaN     NaN     NaN  \n",
       "8194617    NaN  NaN     NaN     NaN  \n",
       "8846226    NaN  NaN     NaN     NaN  \n",
       "9478445    NaN  NaN     NaN     NaN  \n",
       "9794320    NaN  NaN     NaN     NaN  \n",
       "10079204   NaN  NaN     NaN     NaN  \n",
       "\n",
       "[20 rows x 273 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommrdf.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = ecommrdf['runail']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py:2526: RuntimeWarning: Degrees of freedom <= 0 for slice\n",
      "  c = cov(x, y, rowvar)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py:2455: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  c *= np.true_divide(1, fact)\n"
     ]
    }
   ],
   "source": [
    "corr = ecommrdf.corrwith(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix_corr = ecommrdf.corr(method = 'pearson', min_periods = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>brand</th>\n",
       "      <th>airnails</th>\n",
       "      <th>almea</th>\n",
       "      <th>andrea</th>\n",
       "      <th>ardell</th>\n",
       "      <th>arganoil</th>\n",
       "      <th>art-visage</th>\n",
       "      <th>artex</th>\n",
       "      <th>aura</th>\n",
       "      <th>australis</th>\n",
       "      <th>avene</th>\n",
       "      <th>...</th>\n",
       "      <th>voesh</th>\n",
       "      <th>vosev</th>\n",
       "      <th>weaver</th>\n",
       "      <th>yllozure</th>\n",
       "      <th>yoko</th>\n",
       "      <th>ypsed</th>\n",
       "      <th>yu-r</th>\n",
       "      <th>zab</th>\n",
       "      <th>zeitun</th>\n",
       "      <th>zinger</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>brand</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>airnails</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.023064</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.275387</td>\n",
       "      <td>0.315569</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.321561</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.277039</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.352519</td>\n",
       "      <td>0.271719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>almea</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.583320</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.295473</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.125902</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.415658</td>\n",
       "      <td>0.171468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>andrea</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.552043</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ardell</th>\n",
       "      <td>0.023064</td>\n",
       "      <td>0.58332</td>\n",
       "      <td>0.552043</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.395966</td>\n",
       "      <td>0.079647</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.336473</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.048651</td>\n",
       "      <td>0.210714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arganoil</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 273 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "brand     airnails    almea    andrea    ardell  arganoil  art-visage  \\\n",
       "brand                                                                   \n",
       "airnails  1.000000      NaN       NaN  0.023064       NaN    0.275387   \n",
       "almea          NaN  1.00000       NaN  0.583320       NaN    0.295473   \n",
       "andrea         NaN      NaN  1.000000  0.552043       NaN         NaN   \n",
       "ardell    0.023064  0.58332  0.552043  1.000000       NaN    0.395966   \n",
       "arganoil       NaN      NaN       NaN       NaN       1.0         NaN   \n",
       "\n",
       "brand        artex  aura  australis  avene  ...  voesh     vosev  weaver  \\\n",
       "brand                                       ...                            \n",
       "airnails  0.315569   NaN        NaN    NaN  ...    NaN  0.321561     NaN   \n",
       "almea          NaN   NaN        NaN    NaN  ...    NaN       NaN     NaN   \n",
       "andrea         NaN   NaN        NaN    NaN  ...    NaN       NaN     NaN   \n",
       "ardell    0.079647   NaN        NaN    NaN  ...    NaN       NaN     NaN   \n",
       "arganoil       NaN   NaN        NaN    NaN  ...    NaN       NaN     NaN   \n",
       "\n",
       "brand     yllozure      yoko  ypsed  yu-r  zab    zeitun    zinger  \n",
       "brand                                                               \n",
       "airnails       NaN  0.277039    NaN   NaN  NaN  0.352519  0.271719  \n",
       "almea          NaN  0.125902    NaN   NaN  NaN  0.415658  0.171468  \n",
       "andrea         NaN       NaN    NaN   NaN  NaN       NaN       NaN  \n",
       "ardell         NaN  0.336473    NaN   NaN  NaN  0.048651  0.210714  \n",
       "arganoil       NaN       NaN    NaN   NaN  NaN       NaN       NaN  \n",
       "\n",
       "[5 rows x 273 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix_corr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand\n",
       "cnd    2.0\n",
       "Name: 465496, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecommrdf.iloc[0].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "user_corr = pd.Series()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_id = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "for brand in ecommrdf.iloc[user_id].dropna().index:\n",
    "    corr_list = matrix_corr[brand].dropna()*ecommrdf.iloc[user_id][brand]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_corr = user_corr.append(corr_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "brand_list =[]\n",
    "for i in range(len(ecommrdf.iloc[user_id].dropna().index)):\n",
    "    if ecommrdf.iloc[user_id].dropna().index[i] in user_corr:\n",
    "        brand_list.append(ecommrdf.iloc[user_id].dropna().index[i])\n",
    "    else:\n",
    "        pass\n",
    "    user_corr = user_corr.drop(brand_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi, based on the brand that you have bought: \n",
      "\n",
      "cnd\n",
      "\n",
      " you would definitely love these brands \n",
      "\n",
      "bespecial\n",
      "inm\n",
      "likato\n",
      "beautix\n",
      "joico\n"
     ]
    }
   ],
   "source": [
    "print('Hi, based on the brand that you have bought: \\n')\n",
    "for i in ecommrdf.iloc[user_id].dropna().index:\n",
    "    print(i)\n",
    "print( '\\n you would definitely love these brands \\n')\n",
    "for i in user_corr.sort_values(ascending = False). index[:5]:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
